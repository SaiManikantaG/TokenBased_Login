{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/authInterceptor.service.ts","webpack:///./src/app/login.component.ts","webpack:///./src/app/messages.component.ts","webpack:///./src/app/post.component.ts","webpack:///./src/app/profile.component.ts","webpack:///./src/app/register.component.html","webpack:///./src/app/register.component.ts","webpack:///./src/app/users.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\n// api service\n@Injectable()\nexport class ApiService {\n\tmessages = [];\n\tusers = [];\n\tpath = environment.path;\n\tconstructor(private http: HttpClient) {}\n\n\tgetMessages(userId) {\n\t\tthis.http.get<any>(this.path + '/posts/' + userId).subscribe(res => {\n\t\t\tthis.messages = res;\n\t\t});\n\t}\n\n\tpostMessages(message) {\n\t\tthis.http.post(this.path + '/posts', message).subscribe(res => {});\n\t}\n\n\tgetUsers() {\n\t\tthis.http.get<any>(this.path + '/users').subscribe(res => {\n\t\t\tthis.users = res;\n\t\t});\n\t}\n\n\tgetProfile(id) {\n\t\treturn this.http.get(this.path + '/profile/' + id);\n\t}\n}\n","module.exports = \"\"","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <mat-toolbar>\n  <button mat-button routerLink=\"/\">Home</button>\n  <span style=\"flex: 1 1 auto\"></span>\n  <button mat-button  routerLink=\"/users\"> Users </button>\n  <button mat-button *ngIf=\"!authService.isAuthenticated\" routerLink=\"/register\"> Register </button>\n  <button mat-button *ngIf=\"!authService.isAuthenticated\" routerLink=\"/login\"> Login </button>\n  <button mat-button *ngIf=\"authService.isAuthenticated\" (click)=\"authService.logout()\"> Logout </button>\n  </mat-toolbar>\n  <router-outlet></router-outlet>`,\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  constructor(private authService: AuthService) {}\n\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatFormFieldModule,\n  MatToolbarModule,\n  MatInputModule,\n  MatListModule,\n} from '@angular/material';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { ApiService } from './api.service';\nimport { AuthService } from './auth.service';\nimport { MessagesComponent } from './messages.component';\nimport { RegisterComponent } from './register.component';\nimport { LoginComponent } from './login.component';\nimport { UsersComponent } from './users.component';\nimport { ProfileComponent } from './profile.component';\nimport { AuthInterceptorService } from './authInterceptor.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { PostComponent } from './post.component';\nconst routes = [\n  { path: 'register', component: RegisterComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'users', component: UsersComponent },\n  { path: 'profile/:id', component: ProfileComponent },\n  { path: '', component: PostComponent },\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostComponent,\n    UsersComponent,\n    MessagesComponent,\n    RegisterComponent,\n    LoginComponent,\n    ProfileComponent,\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(routes),\n    HttpClientModule,\n    MatButtonModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatInputModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    FormsModule,\n    MatListModule,\n  ],\n  providers: [\n    ApiService,\n    AuthService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptorService,\n      multi: true,\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../environments/environment';\n\n@Injectable()\nexport class AuthService {\n\tmessages = [];\n\tpath = environment.path + '/auth';\n\n\tTOKEN_KEY = 'token';\n\n\tconstructor(private http: HttpClient) {}\n\n\tgetToken() {\n\t\treturn localStorage.getItem(this.TOKEN_KEY);\n\t}\n\n\tget isAuthenticated() {\n\t\treturn !!localStorage.getItem(this.TOKEN_KEY);\n\t}\n\n\tlogout() {\n\t\tlocalStorage.removeItem(this.TOKEN_KEY);\n\t}\n\n\tregisterUser(registerData) {\n\t\tthis.http.post<any>(this.path + '/register', registerData).subscribe(res => {\n\t\t\tconsole.log(res);\n\t\t\tthis.saveToken(res.token);\n\t\t});\n\t}\n\tloginUser(loginData) {\n\t\tthis.http.post<any>(this.path + '/login', loginData).subscribe(res => {\n\t\t\tthis.saveToken(res.token);\n\t\t});\n\t}\n\n\tsaveToken(token) {\n\t\tlocalStorage.setItem(this.TOKEN_KEY, token);\n\t}\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private injector: Injector) {}\n\n  intercept(req, next) {\n    var auth = this.injector.get(AuthService);\n    var authRequest = req.clone({\n      headers: req.headers.set('Authorization', 'token ' + auth.getToken()),\n    });\n\n    return next.handle(authRequest);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'login',\n  template: `\n  <mat-card>\n  <mat-card-header>\n  <mat-card-title>\n  <h4>Login New User</h4>\n  </mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n  <form>\n  <mat-form-field class=\"example-full-width\">\n  <input [(ngModel)]=\"loginData.email\"\n  name=\"email\" matInput placeholder=\"email\" type=\"email\">\n</mat-form-field>\n<mat-form-field class=\"example-full-width\">\n  <input [(ngModel)]=\"loginData.pswd\"\n  name=\"password\" matInput placeholder=\"password\" type=\"password\">\n</mat-form-field>\n<button (click)=\"post()\" mat-raised-button color=\"primary\">Login</button>\n</form>\n</mat-card-content>\n</mat-card>\n  `,\n})\nexport class LoginComponent {\n  loginData = {};\n\n  constructor(private authService: AuthService) {}\n\n  post() {\n    //console.log(this.loginData);\n    this.authService.loginUser(this.loginData);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'messages',\n  template: `<div *ngFor=\"let message of apiService.messages\">\n  <mat-card>{{message.msg}}</mat-card>\n\n</div>`,\n})\nexport class MessagesComponent {\n  constructor(private apiService: ApiService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    var userId = this.route.snapshot.params.id;\n    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.\n    //Add 'implements OnInit' to the class.\n    this.apiService.getMessages(userId);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service';\n\n@Component({\n  selector: 'post',\n  template: `<div style=\"width: 100%\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <h4>New Posts</h4>\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n    <form>\n        <mat-form-field class=\"example-full-width\">\n          <textarea [(ngModel)]=\"postMsg\" name=\"description\" matInput placeholder=\"Posts\"></textarea>\n        </mat-form-field>\n        <br>\n        <button (click)=\"post()\" mat-raised-button color=\"primary\">Post</button>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</div>\n`,\n})\nexport class PostComponent {\n  constructor(private apiService: ApiService) {}\n  postMsg = '';\n\n  post() {\n    console.log(this.postMsg);\n    this.apiService.postMessages({ msg: this.postMsg });\n  }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'login',\n  template: `\n  <mat-card>\n  <mat-card-header>\n  <mat-card-title>\n  <h4>Profile</h4>\n  </mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n  <mat-list >\n  <mat-list-item >Email: {{profile?.email}}</mat-list-item>\n  <mat-list-item >Name: {{profile?.name}}</mat-list-item>\n  <mat-list-item >Description: {{profile?.description}}</mat-list-item>\n </mat-list>\n</mat-card-content>\n</mat-card>\n<mat-card>\n  <mat-card-header>\n  <mat-card-title>\n  <h4>Posts</h4>\n  </mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n  <messages></messages>\n</mat-card-content>\n</mat-card>\n\n  `,\n})\nexport class ProfileComponent {\n  constructor(private apiService: ApiService, private route: ActivatedRoute) {}\n\n  profile;\n  ngOnInit(): void {\n    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.\n    //Add 'implements OnInit' to the class.\n    var id = this.route.snapshot.params.id;\n    this.apiService.getProfile(id).subscribe(data => {\n      this.profile = data;\n    });\n  }\n}\n","module.exports = \"<div style=\\\"width: 100%\\\">\\n  <mat-card>\\n    <mat-card-header>\\n      <mat-card-title>\\n        <h4>Register New User</h4>\\n      </mat-card-title>\\n    </mat-card-header>\\n    <mat-card-content>\\n      <form>\\n        <mat-form-field class=\\\"example-full-width\\\">\\n          <input [(ngModel)]=\\\"registerData.email\\\" name=\\\"email\\\" matInput placeholder=\\\"email\\\" type=\\\"email\\\">\\n        </mat-form-field>\\n        <mat-form-field class=\\\"example-full-width\\\">\\n          <input [(ngModel)]=\\\"registerData.pswd\\\" name=\\\"password\\\" matInput placeholder=\\\"password\\\" type=\\\"password\\\">\\n        </mat-form-field>\\n        <br>\\n        <mat-form-field class=\\\"example-full-width\\\">\\n          <input [(ngModel)]=\\\"registerData.name\\\" name=\\\"name\\\" matInput placeholder=\\\"name\\\">\\n        </mat-form-field>\\n        <br>\\n        <mat-form-field class=\\\"example-full-width\\\">\\n          <textarea [(ngModel)]=\\\"registerData.description\\\" name=\\\"description\\\" matInput placeholder=\\\"description\\\"></textarea>\\n        </mat-form-field>\\n        <br>\\n        <button (click)=\\\"post()\\\" mat-raised-button color=\\\"primary\\\">Register</button>\\n      </form>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'register',\n  templateUrl: 'register.component.html',\n})\nexport class RegisterComponent {\n  registerData = {};\n\n  constructor(private authService: AuthService) {}\n\n  post() {\n    console.log(this.registerData);\n    this.authService.registerUser(this.registerData);\n  }\n}\n","import { Component } from '@angular/core';\nimport { ApiService } from './api.service';\n\n@Component({\n  selector: 'users',\n  template: `<div *ngFor=\"let user of apiService.users\">\n  <mat-card [routerLink]=\"['/profile', user._id]\" style=\"cursor: pointer;\">{{user.name}}</mat-card>\n\n</div>`,\n})\nexport class UsersComponent {\n  constructor(private apiService: ApiService) {}\n\n  ngOnInit(): void {\n    //Called after the constructor, initializing input properties, and the first call to ngOnChanges.\n    //Add 'implements OnInit' to the class.\n    this.apiService.getUsers();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n\tproduction: false,\n\tpath: 'http://localhost:3000',\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}